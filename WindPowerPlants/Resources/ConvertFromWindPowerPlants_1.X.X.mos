// Generated by conversion of WindPowerPlants
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.electricalPowerSensor.abs_y","plant.generator.electricalPowerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.electricalPowerSensor.arg_y","plant.generator.electricalPowerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.electricalPowerSensor.y","plant.generator.electricalPowerSensor.apparentPower");
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.idealPower.powerSensor.abs_y","plant.generator.idealPower.powerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.idealPower.powerSensor.arg_y","plant.generator.idealPower.powerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.idealPower.powerSensor.y","plant.generator.idealPower.powerSensor.apparentPower");
convertElement("WindPowerPlants.Examples.GenericPlantElectricRealData","plant.generator.idealPower.variableCurrentSource.variableResistor","plant.generator.idealPower.variableCurrentSource.variableConductor");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.electricalPowerSensor.abs_y","generator.electricalPowerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.electricalPowerSensor.arg_y","generator.electricalPowerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.electricalPowerSensor.y","generator.electricalPowerSensor.apparentPower");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.idealPower.powerSensor.abs_y","generator.idealPower.powerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.idealPower.powerSensor.arg_y","generator.idealPower.powerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.idealPower.powerSensor.y","generator.idealPower.powerSensor.apparentPower");
convertElement("WindPowerPlants.Plants.GenericVariableSpeedElectrical","generator.idealPower.variableCurrentSource.variableResistor","generator.idealPower.variableCurrentSource.variableConductor");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","electricalPowerSensor.abs_y","electricalPowerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","electricalPowerSensor.arg_y","electricalPowerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","electricalPowerSensor.y","electricalPowerSensor.apparentPower");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","idealPower.powerSensor.abs_y","idealPower.powerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","idealPower.powerSensor.arg_y","idealPower.powerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","idealPower.powerSensor.y","idealPower.powerSensor.apparentPower");
convertElement("WindPowerPlants.Components.GenericVariableSpeedGeneratorElectrical","idealPower.variableCurrentSource.variableResistor","idealPower.variableCurrentSource.variableConductor");
convertElement("WindPowerPlants.Sources.IdealRealPower","potentialSensor.abs_y","potentialSensor.abs_v");
convertElement("WindPowerPlants.Sources.IdealRealPower","potentialSensor.arg_y","potentialSensor.arg_v");
convertElement("WindPowerPlants.Sources.IdealRealPower","potentialSensor.y","potentialSensor.v");
convertElement("WindPowerPlants.Sources.IdealRealPower","powerSensor.abs_y","powerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Sources.IdealRealPower","powerSensor.arg_y","powerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Sources.IdealRealPower","powerSensor.y","powerSensor.apparentPower");
convertElement("WindPowerPlants.Sources.IdealRealPowerConductance","powerSensor.abs_y","powerSensor.abs_apparentPower");
convertElement("WindPowerPlants.Sources.IdealRealPowerConductance","powerSensor.arg_y","powerSensor.arg_apparentPower");
convertElement("WindPowerPlants.Sources.IdealRealPowerConductance","powerSensor.y","powerSensor.apparentPower");
convertElement("WindPowerPlants.Sources.IdealRealPowerConductance","variableCurrentSource.variableResistor","variableCurrentSource.variableConductor");
